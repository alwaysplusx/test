package org.moon.ii.concurrent.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.Future;
import java.util.concurrent.FutureTask;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.RunnableFuture;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;

import org.moon.ii.concurrent.ThreadPool;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SimpleSingleThreadPool implements ThreadPool {

    private static Logger log = LoggerFactory.getLogger(SimpleSingleThreadPool.class);
    private LinkedBlockingQueue<Runnable> taskQueue = new LinkedBlockingQueue<Runnable>();
    private List<Thread> threads = new ArrayList<Thread>();
    private ReentrantLock lock = new ReentrantLock();
    private Condition condition = lock.newCondition();
    private AtomicInteger atomInteger = new AtomicInteger();

    public SimpleSingleThreadPool(String prefix) {
        for (int i = 0; i < 1; i++) {
            Thread t = new Thread(new Worker(), prefix + atomInteger.getAndIncrement());
            threads.add(t);
            t.start();
        }
    }

    public <T> Future<T> submit(Callable<T> task) {
        RunnableFuture<T> ftask = newTaskFor(task);
        execute(ftask);
        return ftask;
    }

    private void execute(RunnableFuture<?> ftask) {
        try {
            lock.lock();
            taskQueue.put(ftask);
            condition.signal();
        } catch (InterruptedException e) {
            e.printStackTrace();
        } finally {
            lock.unlock();
        }
    }

    public <T> RunnableFuture<T> newTaskFor(Callable<T> task) {
        return new FutureTask<T>(task);
    }

    public <T> RunnableFuture<T> newTaskFor(Runnable task) {
        return new FutureTask<T>(task, null);
    }

    class Worker implements Runnable {
        @Override
        public void run() {
            lock.lock();
            try {
                while (true) {
                    while (taskQueue.isEmpty()) {
                        condition.await();
                    }
                    Runnable r = taskQueue.poll();
                    r.run();
                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                lock.unlock();
            }
        }

    }

    @Override
    public void submit(Runnable task) {
        execute(newTaskFor(task));
    }

    @Override
    public void shutdown() {
        for (Thread t : threads) {
            t.interrupt();
        }
    }

    public static void main(String[] args) throws Exception {
        SimpleSingleThreadPool threadPool = new SimpleSingleThreadPool("slef-turning-");
        for (int i = 0; i < 100; i++) {
            threadPool.submit(new Task());
        }
    }

    static class Task implements Runnable {
        @Override
        public void run() {
            log.info("task has run");
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}

interface ThreadPool {

    public <T> Future<T> submit(Callable<T> task);

    public void submit(Runnable task);
    
    public void shutdown();

}